(define tolerance 0.00001)

(define (fixed-point f first-guess)
 (define (close-enough? v1 v2)
  (< (abs (- v1 v2)) tolerance))
 (define (try guess)
  (let ((next (f guess)))
   (if (close-enough? guess next)
    next
    (try next))))
  (try first-guess)
)

;(fixed-point cos 1.0)
;(fixed-point (lambda (y) (+ (sin y) (cos y))) 1.0)

(define (cont-frac n d k)
  (define (cont-frac-iter m)
    (cond
      ((> m k) 0)
      (else (/ (n m) (+ (d m) (cont-frac-iter (+ m 1)))))))
  (cont-frac-iter 1)
)

(define (cont-frac-iter n d k)
  (define (cont-frac-it m result)
    (cond
      ((= m 0) result)
      (else (cont-frac-it (- m 1) (/ (n m) (+ (d m) result))))))
  (cont-frac-it k 0)
)

(define phi (/ 1 (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 12)))
;phi

(define (euler-d i)
  (cond
   ((= i 1) 1)
   ((= i 2) 2)
   ((not (= (mod i 3) 2)) 1)
   (else (* 2 (/ (+ i 1) 3))))
)

;(map euler-d '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)

;(cont-frac (lambda (i) 1.0) euler-d 20)

(define (tan-cf x k)
  (define (n i)
    (if (= i 1) x (- (* x x))))
  (define (d i)
    (- (* 2 i) 1))
  (cont-frac n d k))

;(tan-cf (* 3.14 0.25) 20)

