(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (square x) (* x x))
(define (average x y) (/ (+ x y) 2))

(define dx 0.00001)

(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x)) dx)))

(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

;(define (sqrt x)
; (newtons-method (lambda (y) (- (square y) x)) 1.0))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y))) 1.0))

(define (double f)
  (lambda (x) (f (f x))))

(define (inc x) (+ x 1))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (define (repeat-iter n)
    (if (= n 0)
        (lambda (x) x)
        (compose f (repeat-iter (- n 1)))))
  (repeat-iter n))

(define (smooth f)
  (lambda (x) (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))

(define (repeat-smooth f n)
  (repeated (smooth f) n))

(define (sqrt-r x)
  (fixed-point (average-damp (average-damp (lambda (y) (/ x (expt y 3))))) 1.0))

(define (iterative-improve enough? next)
  (lambda (guess)
    (define (check guess)
      (if (enough? guess)
        guess
        (check (next guess))))
    (check guess)))

(define (sqrt-imp x)
  ((iterative-improve
    (lambda (guess) (< (abs (- (square guess) x)) 0.001))
    (lambda (guess) (average guess (/ x guess)))
    ) 1.0))

(define (fixed-point-imp f first-guess)
  ((iterative-improve
      (lambda (guess) (< (abs (- guess (f guess))) tolerance))
      f) first-guess))
